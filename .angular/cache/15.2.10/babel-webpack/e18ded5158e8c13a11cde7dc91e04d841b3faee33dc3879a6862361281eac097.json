{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.endpoint = 'http://localhost:8080/api';\n      // endpoint: string = 'https://apicampaign.herokuapp.com/api';\n      this.headers = new HttpHeaders().set('Content-Type', 'application/json');\n      this.currentUser = {};\n      this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\n      this.user = this.userSubject.asObservable();\n      this.addLogs = new Subject();\n      this.logs = new Array();\n    }\n    // Sign-up\n    signUp(user) {\n      let api = `${this.endpoint}/signup`;\n      return this.http.post(api, user).pipe(catchError(this.handleError));\n    }\n    // Sign-in\n    signIn(userName, password) {\n      let getUser;\n      return this.http.post(`${this.endpoint}/login`, {\n        userName,\n        password\n      }).subscribe(res => {\n        getUser = res;\n        console.log('the id to be shared:', getUser.message._id);\n        this.addLogs.next(getUser.message._id);\n        localStorage.setItem('access_token', res.token);\n        localStorage.setItem('access_id', getUser.message._id);\n        let data = localStorage.getItem('access_id');\n        console.log('access_token', data);\n        this.router.navigate(['campaign/viewposts/' + data]);\n        // this.router.navigate(['campaign/viewposts/' + getUser.message._id]);\n        //this.router.navigate(['user-profile/' + getUser.message._id]);\n      });\n    }\n\n    logIn(userName, password) {\n      return this.http.post(`${this.endpoint}/login`, {\n        userName,\n        password\n      }).pipe(map(user => {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        localStorage.setItem('access_token', JSON.stringify(user));\n        this.userSubject.next(user);\n        return user;\n      }));\n    }\n    //to subscribe to login\n    getToken() {\n      return localStorage.getItem('access_id');\n    }\n    get isLoggedIn() {\n      let authToken = localStorage.getItem('access_token');\n      this.getToken();\n      return authToken !== null ? true : false;\n    }\n    doLogout() {\n      let removeToken = localStorage.removeItem('access_token');\n      if (removeToken == null) {\n        localStorage.removeItem('access_id');\n        this.router.navigate(['log-in']);\n      }\n    }\n    //get the user info\n    getUserById(_id) {\n      return this.http.get(`${this.endpoint}/user-profile/${_id}`);\n      // return this.http.get<campaignType>(`${this.campaignTypeUrl}/${campaign.campaignName}`);\n    }\n    // User profile\n    getUserProfile(id) {\n      let api = `${this.endpoint}/user-profile/${id}`;\n      return this.http.get(api, {\n        headers: this.headers\n      }).pipe(map(res => {\n        console.log(res);\n        return res || {};\n      }), catchError(this.handleError));\n    }\n    // Error \n    handleError(error) {\n      let msg = '';\n      if (error.error instanceof ErrorEvent) {\n        // client-side error\n        msg = error.error.message;\n      } else {\n        // server-side error\n        msg = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n      return throwError(msg);\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}