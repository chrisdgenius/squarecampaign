{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let WalletService = /*#__PURE__*/(() => {\n  class WalletService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.campaignTypeUrl = 'http://localhost:8080/campaignType';\n      //private campaignTypeUrl = 'https://apicampaign.herokuapp.com/campaignType';\n      this.headers = new HttpHeaders().set('Content-Type', 'application/json');\n      this.url = 'http://localhost:8080/transaction';\n    }\n    createcampaignType(payload) {\n      return this.http.post(`${this.campaignTypeUrl}/register`, payload);\n    }\n    createcampaignSubcription(payload) {\n      return this.http.post(`${this.campaignTypeUrl}/subscription`, payload);\n    }\n    // GET ALL THE CAMPAIGN TYPES\n    getcampaignType() {\n      return this.http.get(`${this.campaignTypeUrl}/ALL`);\n    }\n    //GET AA PARTICULAR CAMPAIGN TYPE BY NAME\n    getcampaignTypeByName(campaignName) {\n      return this.http.get(`${this.campaignTypeUrl}/campaignName/${campaignName}`);\n      // return this.http.get<campaignType>(`${this.campaignTypeUrl}/${campaign.campaignName}`);\n    }\n\n    updatecampaignType(_id, campaign) {\n      return this.http.patch(`${this.campaignTypeUrl}/${campaign.campaignName}`, campaign).pipe(catchError(this.errorHandler));\n    }\n    errorHandler(error) {\n      return throwError(error);\n    }\n    deletecampaignType(_id) {\n      return this.http.delete(`${this.campaignTypeUrl}/${_id}`);\n    }\n    // Error \n    handleError(error) {\n      let msg = '';\n      if (error.error instanceof ErrorEvent) {\n        // client-side error\n        msg = error.error.message;\n      } else {\n        // server-side error\n        msg = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n      return throwError(msg);\n    }\n    makePayment() {\n      //const formData = new FormData();\n      // formData.append('image', image);\n      //  formData.append('name', name);\n      // formData.append('price', amount);\n      //  return this.http.post(this.url,formData);\n      return this.http.get(`${this.url}/pay`);\n    }\n    // GET ALL THE CAMPAIGN TYPES\n    getPost() {\n      return this.http.get(`${this.url}/All`);\n    }\n    //GET wallet balanceby userId\n    walletBalance(userId) {\n      return this.http.get(`${this.url}/wallet/balance/${userId}`);\n    }\n    request(query) {\n      let params = new HttpParams().set(\"transactionID\", query);\n      return this.http.get(`${this.campaignTypeUrl}/response`, {\n        params\n      });\n    }\n    request2(transaction_id) {\n      let params = new HttpParams().set('transaction_id', transaction_id);\n      return this.http.get(`${this.url}/response`, {\n        params\n      });\n    }\n  }\n  WalletService.ɵfac = function WalletService_Factory(t) {\n    return new (t || WalletService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  WalletService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WalletService,\n    factory: WalletService.ɵfac,\n    providedIn: 'root'\n  });\n  return WalletService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}