{"ast":null,"code":"import { Component, EventEmitter, Injectable, Input, NgModule, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Payment data object\n * \\@property public_key {String}\n * \\@property callbackContext {Object}  The context of the\n * component or service that has the callback method.\n * The value must always be 'this'.\n * Using any other value might lead to error.\n * \\@property tx_ref {String}\n * \\@property amount {Number}\n * \\@property currency {String}\n * \\@property payment_options {String}\n * \\@property payment_plan {String}\n * \\@property redirect_url {String}\n * \\@property meta {Object}\n * \\@property customer {Object}\n * \\@property customizations {Object}\n * \\@property callback {Function}\n * \\@property onclose {Function}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nclass InlinePaymentOptions {}\n/**\n * Async Payment data object\n * \\@property public_key {String}\n * \\@property tx_ref {String}\n * \\@property amount {Number}\n * \\@property currency {String}\n * \\@property payment_options {String}\n * \\@property meta {Object}\n * \\@property customer {Object}\n * \\@property customizations {Object}\n * \\@property payment_plan {String}\n */\nclass AsyncPaymentOptions {}\n/**\n * Payment Response\n * \\@property amount {String}\n * \\@property currency {Number}\n * \\@property customer {Object}\n * \\@property flw_ref {String}\n * \\@property status {String}\n * \\@property transaction_id {String}\n * \\@property tx_ref {String}\n * \\@property payment_plan {String}\n */\nclass PaymentSuccessResponse {}\nlet ApiTracking = /*#__PURE__*/(() => {\n  class ApiTracking {\n    constructor() {\n      this.trackingEndPoint = 'https://kgelfdz7mf.execute-api.us-east-1.amazonaws.com/staging/sendevent';\n      this.packageVersion = '1.2.1';\n      this.language = 'Angular V3';\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    track(data) {\n      const /** @type {?} */trackingData = {\n        publicKey: data.paymentData.public_key,\n        language: this.language,\n        version: this.packageVersion,\n        title: '',\n        message: '0' // data.responseTime\n      };\n\n      const /** @type {?} */paymentOptions = data.paymentData.payment_options || '';\n      const /** @type {?} */paymentOptionsArray = paymentOptions ? paymentOptions.split(',') : [];\n      let /** @type {?} */title = '';\n      if (paymentOptionsArray.length === 0) {\n        title = 'Initiate-Charge-Dashboard';\n      } else if (paymentOptionsArray.length === 1) {\n        title = 'Initiate-Charge-' + paymentOptions;\n      } else {\n        title = 'Initiate-Charge-Multiple';\n      }\n      trackingData.title = data.response.status === 'successful' ? title : title + '-error';\n      this.submitTracking(trackingData);\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    submitTracking(data) {\n      fetch(this.trackingEndPoint, {\n        method: 'POST',\n        body: JSON.stringify(data)\n      }).then(res => {});\n    }\n  }\n  ApiTracking.ɵfac = function ApiTracking_Factory(t) {\n    return new (t || ApiTracking)();\n  };\n  ApiTracking.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ApiTracking,\n    factory: ApiTracking.ɵfac\n  });\n  /**\n   * @nocollapse\n   */\n  return ApiTracking;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet Flutterwave = /*#__PURE__*/(() => {\n  class Flutterwave {\n    /**\n     * @param {?} tracker\n     */\n    constructor(tracker) {\n      this.tracker = tracker;\n    }\n    /**\n     * @param {?} paymentData\n     * @return {?}\n     */\n    inlinePay(paymentData) {\n      const /** @type {?} */data = Object.assign({}, paymentData, {\n        callback: response => {\n          this.submitToTracker(paymentData, response, 10000);\n          paymentData.callbackContext[paymentData.callback.name](response);\n        },\n        onclose: () => {\n          try {\n            paymentData.callbackContext[paymentData.onclose.name]();\n          } catch (e) {}\n        }\n      });\n      FlutterwaveCheckout(data);\n    }\n    /**\n     * @param {?} paymentData\n     * @return {?}\n     */\n    asyncInlinePay(paymentData) {\n      return new Promise((resolve, reject) => {\n        paymentData = Object.assign({}, paymentData, {\n          callback: $event => {\n            this.submitToTracker(paymentData, $event, 10000);\n            resolve($event);\n          },\n          onclose: () => resolve('closed')\n        });\n        FlutterwaveCheckout(paymentData);\n      });\n    }\n    /**\n     * @param {?} paymentData\n     * @param {?} response\n     * @param {?} responseTime\n     * @return {?}\n     */\n    submitToTracker(paymentData, response, responseTime) {\n      this.tracker.track({\n        paymentData,\n        response,\n        responseTime\n      });\n    }\n    /**\n     *\n     * @param {?=} waitDuration {Number} Seconds before closing payment modal\n     * @return {?}\n     */\n    closePaymentModal(waitDuration = 0) {\n      setTimeout(() => {\n        document.getElementsByName('checkout')[0].setAttribute('style', 'position:fixed;top:0;left:0;z-index:-1;border:none;opacity:0;pointer-events:none;width:100%;height:100%;');\n        document.body.style.overflow = '';\n        // document.getElementsByName('checkout')[0].setAttribute('style', 'z-index: -1; opacity: 0')\n      }, waitDuration * 1000);\n    }\n  }\n  Flutterwave.ɵfac = function Flutterwave_Factory(t) {\n    return new (t || Flutterwave)(ɵngcc0.ɵɵinject(ApiTracking));\n  };\n  Flutterwave.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Flutterwave,\n    factory: Flutterwave.ɵfac\n  });\n  /**\n   * @nocollapse\n   */\n  return Flutterwave;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MakePaymentComponent = /*#__PURE__*/(() => {\n  class MakePaymentComponent {\n    /**\n     * @param {?} flutterwave\n     */\n    constructor(flutterwave) {\n      this.flutterwave = flutterwave;\n      this.callback = new EventEmitter();\n      this.close = new EventEmitter();\n      this.customer_defaults = {\n        email: '',\n        phone_number: '',\n        name: ''\n      };\n      this.meta_defaults = {\n        consumer_id: '',\n        consumer_mac: ''\n      };\n      this.customizations_defaults = {\n        title: '',\n        description: '',\n        logo: ''\n      };\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {}\n    /**\n     * @return {?}\n     */\n    makePayment() {\n      this.prepareForPayment();\n      FlutterwaveCheckout(this.inlinePaymentOptions);\n    }\n    /**\n     * @return {?}\n     */\n    prepareForPayment() {\n      this.customer = this.customer || {};\n      this.meta = this.meta || {};\n      this.customizations = this.customizations || {};\n      if (this.data) {\n        this.inlinePaymentOptions = Object.assign({}, this.data, {\n          callback: response => {\n            this.flutterwave.submitToTracker(this.data, response, 10000);\n            this.data.callbackContext[this.data.callback.name](response);\n          },\n          onclose: () => {\n            try {\n              this.data.callbackContext[this.data.onclose.name]();\n            } catch (e) {}\n          }\n        });\n      } else {\n        this.inlinePaymentOptions = {\n          callbackContext: null,\n          public_key: this.public_key,\n          tx_ref: this.tx_ref,\n          amount: this.amount,\n          currency: this.currency || 'NGN',\n          payment_options: this.payment_options || 'card, mobilemoney, ussd',\n          redirect_url: this.redirect_url || '',\n          meta: Object.assign({}, this.meta_defaults, this.meta),\n          customer: Object.assign({}, this.customer_defaults, this.customer),\n          callback: response => {\n            this.flutterwave.submitToTracker(this.inlinePaymentOptions, response, 10000);\n            this.callback.emit(response);\n          },\n          onclose: () => this.close.emit(),\n          customizations: Object.assign({}, this.customizations_defaults, this.customizations)\n        };\n        if (this.payment_plan) {\n          this.inlinePaymentOptions.payment_plan = this.payment_plan;\n        }\n        if (this.subaccounts) {\n          this.inlinePaymentOptions.subaccounts = this.subaccounts;\n        }\n        if (this.integrity_hash) {\n          this.inlinePaymentOptions.integrity_hash = this.integrity_hash;\n        }\n      }\n    }\n  }\n  MakePaymentComponent.ɵfac = function MakePaymentComponent_Factory(t) {\n    return new (t || MakePaymentComponent)(ɵngcc0.ɵɵdirectiveInject(Flutterwave));\n  };\n  MakePaymentComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MakePaymentComponent,\n    selectors: [[\"flutterwave-make-payment\"]],\n    inputs: {\n      customer: \"customer\",\n      meta: \"meta\",\n      customizations: \"customizations\",\n      public_key: \"public_key\",\n      tx_ref: \"tx_ref\",\n      amount: \"amount\",\n      currency: \"currency\",\n      payment_options: \"payment_options\",\n      payment_plan: \"payment_plan\",\n      subaccounts: \"subaccounts\",\n      integrity_hash: \"integrity_hash\",\n      redirect_url: \"redirect_url\",\n      text: \"text\",\n      style: \"style\",\n      className: \"className\",\n      data: \"data\"\n    },\n    outputs: {\n      callback: \"callback\",\n      close: \"close\"\n    },\n    decls: 2,\n    vars: 5,\n    consts: [[3, \"ngClass\", \"click\"]],\n    template: function MakePaymentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function MakePaymentComponent_Template_button_click_0_listener() {\n          return ctx.makePayment();\n        });\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleMap(ctx.style);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.className ? ctx.className : \"flutterwave-pay-button\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.text || \"Pay\", \" \");\n      }\n    },\n    dependencies: [ɵngcc1.NgClass],\n    styles: [\".flutterwave-pay-button[_ngcontent-%COMP%]{\\n      background-color: #f5a623;\\n      border-radius: 4px;\\n      border-color: #f5a623;\\n      -webkit-box-shadow: 0 2px 3px 0 #ccc;\\n              box-shadow: 0 2px 3px 0 #ccc;\\n      color: #fff;\\n      display: block;\\n      font-size: 12px;\\n      font-weight: 700;\\n      padding: 14px 22px;\\n      text-align: center;\\n      text-decoration: none;\\n      -webkit-transition: all .3s ease-in-out;\\n      transition: all .3s ease-in-out;\\n\\n    }\"]\n  });\n  /**\n   * @nocollapse\n   */\n  return MakePaymentComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet FlutterwaveModule = /*#__PURE__*/(() => {\n  class FlutterwaveModule {\n    constructor() {\n      const inlineSdk = 'https://checkout.flutterwave.com/v3.js';\n      const script = document.createElement('script');\n      script.src = inlineSdk;\n      if (!document.querySelector(`[src=\"${inlineSdk}\"]`)) {\n        document.body.appendChild(script);\n      }\n    }\n  }\n  FlutterwaveModule.ɵfac = function FlutterwaveModule_Factory(t) {\n    return new (t || FlutterwaveModule)();\n  };\n  FlutterwaveModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: FlutterwaveModule\n  });\n  FlutterwaveModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [Flutterwave, ApiTracking],\n    imports: [CommonModule]\n  });\n  /**\n   * @nocollapse\n   */\n  return FlutterwaveModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FlutterwaveModule, {\n    declarations: function () {\n      return [MakePaymentComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [MakePaymentComponent];\n    }\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FlutterwaveModule, Flutterwave, InlinePaymentOptions, PaymentSuccessResponse, AsyncPaymentOptions, MakePaymentComponent, ApiTracking as ɵa };\n\n//# sourceMappingURL=flutterwave-angular-v3.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}